package contracts

import (
	"context"
	"crypto/ecdsa"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"

	"github.com/ethereum/go-ethereum/crypto"

	"github.com/ethereum/go-ethereum/ethclient"
)

func getAccountAuth(client *ethclient.Client, privateKey *ecdsa.PrivateKey) (*bind.TransactOpts, error) {
	publicKey := privateKey.Public()
	publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
	if !ok {
		return nil, errors.New("error casting public key to ECDSA")
	}

	fromAddress := crypto.PubkeyToAddress(*publicKeyECDSA)

	//fetch the last use nonce of account
	nonce, err := client.PendingNonceAt(context.Background(), fromAddress)
	if err != nil {
		return nil, err
	}

	chainID, err := client.ChainID(context.Background())
	if err != nil {
		return nil, err
	}

	gasPrice, err := client.SuggestGasPrice(context.Background())
	if err != nil {
		return nil, err
	}

	auth, err := bind.NewKeyedTransactorWithChainID(privateKey, chainID)
	if err != nil {
		return nil, err
	}
	auth.Nonce = big.NewInt(int64(nonce))
	auth.Value = big.NewInt(0)      // in wei
	auth.GasLimit = uint64(3000000) // in units
	auth.GasPrice = gasPrice
	auth.From = fromAddress

	return auth, nil
}

func Deploy(client *ethclient.Client, privateKey *ecdsa.PrivateKey, tokenName, symbol string) (string, string, error) {
	// create auth and transaction package for deploying smart contract
	auth, err := getAccountAuth(client, privateKey)
	if err != nil {
		return "", "", err
	}

	// deploying smart contractï¼šDeployApi is auto generated by abigen
	deployedContractAddress, tx, _, err := DeployApi(auth, client, tokenName, symbol)
	if err != nil {
		return "", "", err
	}

	return deployedContractAddress.Hex(), tx.Hash().Hex(), nil
}
